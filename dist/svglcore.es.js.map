{"version":3,"file":"svglcore.es.js","sources":["../src/Tools.js","../src/renderModes.js","../src/Constants.js","../src/MeshView.js","../src/Color.js","../src/Mesh.js","../src/Light.js","../src/Scene.js","../src/PerspectiveCamera.js","../src/Renderer.js","../src/ObjParser.js","../src/LightTypes.js","../src/PointLight.js","../src/AmbiantLight.js","../src/index.js"],"sourcesContent":["/* eslint-disable no-mixed-operators */\n/* eslint-disable no-bitwise */\nclass Tools {\n  static uuidv4() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n      const r = Math.random() * 16 | 0\n      const v = c === 'x' ? r : (r & 0x3 | 0x8)\n      return v.toString(16)\n    });\n  }\n}\n\nexport default Tools\n","export default {\n  POINT_CLOUD: 0,\n  POLYLINE: 1,\n  WIREFRAME: 2,\n  WIREFRAME_RANDOM_SUB: 3,\n  FACE_OPAQUE_PLAIN: 4,\n  DEBUG_GEOMETRY: 5,\n  FACE_LIGHT: 6,\n}\n","export default {\n  SVG_NAMESPACE: 'http://www.w3.org/2000/svg',\n}\n","/* eslint-disable no-undef */\nimport CONSTANTS from './Constants'\n\n/**\n * A MeshView is a rendered SVG version of a given Mesh.\n * Each Mesh is associated to a MeshView\n */\nclass MeshView {\n  constructor(mesh) {\n    this._mesh = mesh\n\n    this._view = document.createElementNS(CONSTANTS.SVG_NAMESPACE, 'g')\n    this._view.setAttributeNS(null, 'id', mesh.id)\n\n    this._circlePool = []\n    this._circlePoolCounter = 0\n\n    this._linePool = []\n    this._linePoolCounter = 0\n\n    this._polygonPool = []\n    this._polygonPoolCounter = 0\n  }\n\n\n  get mesh() {\n    return this._mesh\n  }\n\n\n  get view() {\n    return this._view\n  }\n\n\n  reset() {\n    // TODO: compare which is best\n    this._view.innerHTML = ''\n    // while (this._view.firstChild) {\n    //   this._view.removeChild(this._view.firstChild)\n    // }\n    this._circlePoolCounter = 0\n    this._linePoolCounter = 0\n    this._polygonPoolCounter = 0\n  }\n\n\n  /**\n   *\n   * @param {*} x\n   * @param {*} y\n   * @param {*} radius\n   */\n  addCircle(x, y, radius) {\n    let circle = null\n\n    // the pool is not large enough, we create a new circle\n    if (this._circlePool.length < this._circlePoolCounter + 1) {\n      circle = document.createElementNS(CONSTANTS.SVG_NAMESPACE, 'circle')\n      this._circlePool.push(circle)\n    } else {\n    // The pool is large enough, we borrow a circle from the pool\n      circle = this._circlePool[this._circlePoolCounter]\n    }\n\n    this._circlePoolCounter += 1\n\n    circle.setAttributeNS(null, 'cx', x)\n    circle.setAttributeNS(null, 'cy', y)\n    circle.setAttributeNS(null, 'r', radius)\n    // circle.setAttributeNS(null, 'id', this._mesh.id)\n    circle.setAttributeNS(null, 'style', `fill: ${this._mesh.edgeColorCss}; opacity: ${this._mesh.opacity}; stroke-width: 0;`)\n\n    this._view.appendChild(circle)\n  }\n\n\n  addLine(xA, yA, xB, yB, thickness) {\n    let line = null\n\n    // the pool is not large enough, we create a new line\n    if (this._linePool.length < this._linePoolCounter + 1) {\n      line = document.createElementNS(CONSTANTS.SVG_NAMESPACE, 'line')\n      this._linePool.push(line)\n    } else {\n    // The pool is large enough, we borrow a line from the pool\n      line = this._linePool[this._linePoolCounter]\n    }\n\n    this._linePoolCounter += 1\n    line.setAttributeNS(null, 'x1', xA)\n    line.setAttributeNS(null, 'y1', yA)\n    line.setAttributeNS(null, 'x2', xB)\n    line.setAttributeNS(null, 'y2', yB)\n    line.setAttributeNS(null, 'style', `fill: none; opacity: ${this._mesh.opacity}; stroke-width: ${thickness}; stroke: ${this._mesh.edgeColorCss}`)\n    this._view.appendChild(line)\n  }\n\n\n  addFaceOpaquePlain(xyArr, thickness) {\n    let polygon = null\n    const mesh = this._mesh\n\n    // the pool is not large enough, we create a new polygon\n    if (this._polygonPool.length < this._polygonPoolCounter + 1) {\n      polygon = document.createElementNS(CONSTANTS.SVG_NAMESPACE, 'polygon')\n      this._polygonPool.push(polygon)\n    } else {\n    // The pool is large enough, we borrow a polygon from the pool\n      polygon = this._polygonPool[this._polygonPoolCounter]\n    }\n\n    this._polygonPoolCounter += 1\n\n    let pointsStr = ''\n    for (let i = 0; i < xyArr.length - 1; i += 2) {\n      pointsStr += `${xyArr[i]},${xyArr[i + 1]} `\n    }\n\n    polygon.setAttributeNS(null, 'points', pointsStr)\n    polygon.setAttributeNS(null, 'style', `fill: ${mesh.faceColorCss}; opacity: ${mesh.opacity}; stroke: ${mesh.edgeColorCss}; stroke-width: ${thickness}`)\n    this._view.appendChild(polygon)\n  }\n\n\n\n\n\n  addFaceColorNoStroke(xyArr, color) {\n    let polygon = null\n    const mesh = this._mesh\n\n    // the pool is not large enough, we create a new polygon\n    if (this._polygonPool.length < this._polygonPoolCounter + 1) {\n      polygon = document.createElementNS(CONSTANTS.SVG_NAMESPACE, 'polygon')\n      this._polygonPool.push(polygon)\n    } else {\n    // The pool is large enough, we borrow a polygon from the pool\n      polygon = this._polygonPool[this._polygonPoolCounter]\n    }\n\n    this._polygonPoolCounter += 1\n\n    let pointsStr = ''\n    for (let i = 0; i < xyArr.length - 1; i += 2) {\n      pointsStr += `${xyArr[i]},${xyArr[i + 1]} `\n    }\n\n    polygon.setAttributeNS(null, 'points', pointsStr)\n    polygon.setAttributeNS(null, 'style', `fill: ${color}; opacity: ${mesh.opacity}; stroke-width: 0;`)\n    this._view.appendChild(polygon)\n  }\n}\n\nexport default MeshView\n","/* eslint-disable no-bitwise */\n// These are the colors such as used in css\nconst htmlColors = {\n  black: '#000000',\n  silver: '#C0C0C0',\n  gray: '#808080',\n  grey: '#808080',\n  white: '#FFFFFF',\n  maroon: '#800000',\n  red: '#FF0000',\n  purple: '#800080',\n  fuchsia: '#FF00FF',\n  green: '#008000',\n  lime: '#00FF00',\n  olive: '#808000',\n  yellow: '#FFFF00',\n  navy: '#000080',\n  blue: '#0000FF',\n  teal: '#008080',\n  aqua: '#00FFFF',\n  darkblue: '#00008B',\n  mediumblue: '#0000CD',\n  darkgreen: '#006400',\n  darkcyan: '#008B8B',\n  deepskyblue: '#00BFFF',\n  darkturquoise: '#00CED1',\n  mediumspringgreen: '#00FA9A',\n  springgreen: '#00FF7F',\n  cyan: '#00FFFF',\n  midnightblue: '#191970',\n  dodgerblue: '#1E90FF',\n  lightseagreen: '#20B2AA',\n  forestgreen: '#228B22',\n  seagreen: '#2E8B57',\n  darkslategray: '#2F4F4F',\n  darkslategrey: '#2F4F4F',\n  limegreen: '#32CD32',\n  mediumseagreen: '#3CB371',\n  turquoise: '#40E0D0',\n  royalblue: '#4169E1',\n  steelblue: '#4682B4',\n  darkslateblue: '#483D8B',\n  mediumturquoise: '#48D1CC',\n  indigo: '#4B0082',\n  darkolivegreen: '#556B2F',\n  cadetblue: '#5F9EA0',\n  cornflowerblue: '#6495ED',\n  rebeccapurple: '#663399',\n  mediumaquamarine: '#66CDAA',\n  dimgray: '#696969',\n  dimgrey: '#696969',\n  slateblue: '#6A5ACD',\n  olivedrab: '#6B8E23',\n  slategray: '#708090',\n  slategrey: '#708090',\n  lightslategray: '#778899',\n  lightslategrey: '#778899',\n  mediumslateblue: '#7B68EE',\n  lawngreen: '#7CFC00',\n  chartreuse: '#7FFF00',\n  aquamarine: '#7FFFD4',\n  skyblue: '#87CEEB',\n  lightskyblue: '#87CEFA',\n  blueviolet: '#8A2BE2',\n  darkred: '#8B0000',\n  darkmagenta: '#8B008B',\n  saddlebrown: '#8B4513',\n  darkseagreen: '#8FBC8F',\n  lightgreen: '#90EE90',\n  mediumpurple: '#9370DB',\n  darkviolet: '#9400D3',\n  palegreen: '#98FB98',\n  darkorchid: '#9932CC',\n  yellowgreen: '#9ACD32',\n  sienna: '#A0522D',\n  brown: '#A52A2A',\n  darkgray: '#A9A9A9',\n  darkgrey: '#A9A9A9',\n  lightblue: '#ADD8E6',\n  greenyellow: '#ADFF2F',\n  paleturquoise: '#AFEEEE',\n  lightsteelblue: '#B0C4DE',\n  powderblue: '#B0E0E6',\n  firebrick: '#B22222',\n  darkgoldenrod: '#B8860B',\n  mediumorchid: '#BA55D3',\n  rosybrown: '#BC8F8F',\n  darkkhaki: '#BDB76B',\n  mediumvioletred: '#C71585',\n  indianred: '#CD5C5C',\n  peru: '#CD853F',\n  chocolate: '#D2691E',\n  tan: '#D2B48C',\n  lightgray: '#D3D3D3',\n  lightgrey: '#D3D3D3',\n  thistle: '#D8BFD8',\n  orchid: '#DA70D6',\n  goldenrod: '#DAA520',\n  palevioletred: '#DB7093',\n  crimson: '#DC143C',\n  gainsboro: '#DCDCDC',\n  plum: '#DDA0DD',\n  burlywood: '#DEB887',\n  lightcyan: '#E0FFFF',\n  lavender: '#E6E6FA',\n  darksalmon: '#E9967A',\n  violet: '#EE82EE',\n  palegoldenrod: '#EEE8AA',\n  lightcoral: '#F08080',\n  khaki: '#F0E68C',\n  aliceblue: '#F0F8FF',\n  honeydew: '#F0FFF0',\n  azure: '#F0FFFF',\n  sandybrown: '#F4A460',\n  wheat: '#F5DEB3',\n  beige: '#F5F5DC',\n  whitesmoke: '#F5F5F5',\n  mintcream: '#F5FFFA',\n  ghostwhite: '#F8F8FF',\n  salmon: '#FA8072',\n  antiquewhite: '#FAEBD7',\n  linen: '#FAF0E6',\n  lightgoldenrodyellow: '#FAFAD2',\n  oldlace: '#FDF5E6',\n  magenta: '#FF00FF',\n  deeppink: '#FF1493',\n  orangered: '#FF4500',\n  tomato: '#FF6347',\n  hotpink: '#FF69B4',\n  coral: '#FF7F50',\n  darkorange: '#FF8C00',\n  lightsalmon: '#FFA07A',\n  orange: '#FFA500',\n  lightpink: '#FFB6C1',\n  pink: '#FFC0CB',\n  gold: '#FFD700',\n  peachpuff: '#FFDAB9',\n  navajowhite: '#FFDEAD',\n  moccasin: '#FFE4B5',\n  bisque: '#FFE4C4',\n  mistyrose: '#FFE4E1',\n  blanchedalmond: '#FFEBCD',\n  papayawhip: '#FFEFD5',\n  lavenderblush: '#FFF0F5',\n  seashell: '#FFF5EE',\n  cornsilk: '#FFF8DC',\n  lemonchiffon: '#FFFACD',\n  floralwhite: '#FFFAF0',\n  snow: '#FFFAFA',\n  lightyellow: '#FFFFE0',\n  ivory: '#FFFFF0',\n}\n\n// some links about blending formulas\n// https://webdesign.tutsplus.com/tutorials/blending-modes-in-css-color-theory-and-practical-application--cms-25201\n// https://www.wikiwand.com/en/Blend_modes\n\nclass Color {\n  static hexToRgb(hex) {\n    let colorArray = null\n\n    if (hex.length === 4) { // such as '#F61'\n      colorArray = [\n        parseInt(`${hex[1]}${hex[1]}`, 16),\n        parseInt(`${hex[2]}${hex[2]}`, 16),\n        parseInt(`${hex[3]}${hex[3]}`, 16),\n      ]\n    } else if (hex.length === 7) { // such as '#FF6611\n      colorArray = [\n        parseInt(`${hex[1]}${hex[2]}`, 16),\n        parseInt(`${hex[3]}${hex[4]}`, 16),\n        parseInt(`${hex[5]}${hex[6]}`, 16),\n      ]\n    }\n    return colorArray\n  }\n\n\n  static rgbToHex(r, g, b) {\n    return `#${((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1)}`\n  }\n\n\n  static htmlToHex(htmlColor) {\n    if (htmlColor in htmlColors) {\n      return htmlColors[htmlColor]\n    }\n    return null\n  }\n\n\n  static htmlToRgb(htmlColor) {\n    if (htmlColor in htmlColors) {\n      return Color.hexToRgb(htmlColors[htmlColor])\n    }\n    return null\n  }\n\n\n  static whateverToRgb(w) {\n    if (Array.isArray(w) && w.length === 3) {\n      return w.slice()\n    }\n\n    if (w in htmlColors) {\n      return Color.hexToRgb(htmlColors[w])\n    }\n\n    if (w[0] === '#') {\n      return Color.hexToRgb(w)\n    }\n\n    return null\n  }\n\n\n  static rgbToCssRgb(c) {\n    return `rgb(${c[0]}, ${c[1]}, ${c[2]})`\n  }\n\n\n  /*\n\n  TODO: illumination models may partly go there when it comes to color blending.\n  Though, the parts about:\n  - ambient light will prob go in scene\n  - diffuse light will prob go in a point light obj\n  - Phong/specular illumination model will prob go to a light obj as well\n   \n  */\n}\n\nexport default Color\n","import * as glmatrix from 'gl-matrix'\nimport Tools from './Tools'\nimport RENDER_MODES from './renderModes'\nimport MeshView from './MeshView'\nimport Color from './Color'\n\n\nclass Mesh {\n  constructor() {\n    this._id = Tools.uuidv4()\n    this._meshView = new MeshView(this)\n\n    // if visible is false, this mesh will not be rendered\n    this._visible = true\n\n    // geometry data\n    this._vertices = null\n    this._worldVertices = null\n    this._faces = null\n    this._uniqueEdges = null\n    this._verticesPerFace = 3\n    this._boundingBox = {\n      min: glmatrix.vec3.fromValues(0, 0, 0),\n      max: glmatrix.vec3.fromValues(0, 0, 0),\n      center: glmatrix.vec3.fromValues(0, 0, 0),\n    }\n    this._boundingBoxNeedsUpdate = true\n    this._showBoundingBox = false\n\n    this._scale = glmatrix.vec3.fromValues(1, 1, 1)\n    this._quaternion = glmatrix.quat.create()\n    this._position = glmatrix.vec3.create()\n\n    // material data\n    this._renderMode = RENDER_MODES.POINT_CLOUD\n    this._edgeColor = [0, 0, 0]\n    this._edgeColorCss = Color.rgbToCssRgb(this._edgeColor)\n    this._faceColor = [200, 200, 200]\n    this._faceColorCss = Color.rgbToCssRgb(this._faceColor)\n    this._opacity = 1\n    this._lineThickness = 1\n    this._radius = 1\n\n    this._matrix = glmatrix.mat4.create()\n    this._worldVerticesNeedUpdate = true\n\n    this._faceNormalsWorld = null\n    this._faceNormalsWorldNeedUpdate = true\n\n    this._faceCentersWorld = null\n    this._faceCentersWorldNeedUpdate = true\n\n    this._specularity = 0\n  }\n\n\n  get id() {\n    return this._id\n  }\n\n\n  set renderMode(rm) {\n    if (Object.values(RENDER_MODES).includes(rm)) {\n      this._renderMode = rm\n    } else {\n      throw new Error('The render mode is incorrect.')\n    }\n  }\n\n\n  get renderMode() {\n    return this._renderMode\n  }\n\n\n  set lineThickness(t) {\n    this._lineThickness = t\n  }\n\n\n  get lineThickness() {\n    return this._lineThickness\n  }\n\n\n  set radius(r) {\n    this._radius = r\n  }\n\n\n  get radius() {\n    return this._radius\n  }\n\n\n  set vertices(v) {\n    if (v.length % 3 !== 0) {\n      throw new Error('The vertice array length must be multiple of 3.')\n    }\n\n    this._vertices = v\n    this._worldVertices = new v.constructor(v.length)\n    this._boundingBoxNeedsUpdate = true\n    this._faceNormalsWorldNeedUpdate = true\n    this._faceCentersWorldNeedUpdate = true\n    this._worldVerticesNeedUpdate = true\n    return this\n  }\n\n\n  get vertices() {\n    return this._vertices\n  }\n\n\n  get nbVertices() {\n    if (this._vertices === null) {\n      return 0\n    }\n\n    return this._vertices.length / 3\n  }\n\n\n  get worldVertices() {\n    if (this._worldVerticesNeedUpdate) {\n      this._computeWorldVertices()\n    }\n    return this._worldVertices\n  }\n\n\n  _computeWorldVertices() {\n    const mat = this.modelMatrix\n    const tmpVec3 = glmatrix.vec3.create()\n    const vert = this._vertices\n\n    for (let i = 0; i < this._worldVertices.length; i += 3) {\n      tmpVec3[0] = vert[i]\n      tmpVec3[1] = vert[i + 1]\n      tmpVec3[2] = vert[i + 2]\n\n      glmatrix.vec3.transformMat4(tmpVec3, tmpVec3, mat)\n      this._worldVertices[i] = tmpVec3[0]\n      this._worldVertices[i + 1] = tmpVec3[1]\n      this._worldVertices[i + 2] = tmpVec3[2]\n    }\n\n    this._worldVerticesNeedUpdate = false\n  }\n\n\n  set faces(f) {\n    this._faces = f\n    this._faceNormalsWorldNeedUpdate = true\n    this._faceCenterWorldNeedUpdate = true\n  }\n\n\n  get faces() {\n    return this._faces\n  }\n\n\n  set edgeColor(c) {\n    this._edgeColor = Color.whateverToRgb(c)\n    this._edgeColorCss = Color.rgbToCssRgb(this._edgeColor)\n  }\n\n\n  get edgeColor() {\n    return this._edgeColor\n  }\n\n\n  get edgeColorCss() {\n    return this._edgeColorCss\n  }\n\n\n  set faceColor(c) {\n    this._faceColor = Color.whateverToRgb(c)\n    this._faceColorCss = Color.rgbToCssRgb(this._faceColor)\n  }\n\n\n  get faceColor() {\n    return this._faceColor\n  }\n\n\n  get faceColorCss() {\n    return this._faceColorCss\n  }\n\n\n  set opacity(o) {\n    this._opacity = o\n  }\n\n\n  get opacity() {\n    return this._opacity\n  }\n\n\n  set verticesPerFace(vpf) {\n    this._verticesPerFace = vpf\n  }\n\n\n  get verticesPerFace() {\n    return this._verticesPerFace\n  }\n\n\n  get visible() {\n    return this._visible\n  }\n\n\n  set visible(v) {\n    this._visible = v\n  }\n\n\n  set showBoundingBox(s) {\n    this._showBoundingBox = s\n  }\n\n\n  get showBoundingBox() {\n    return this._showBoundingBox\n  }\n\n\n  get specularity() {\n    return this._specularity\n  }\n\n\n  set specularity(s) {\n    this._specularity = s\n  }\n\n  /**\n   * Note: the bounding box is in world coordinates\n   */\n  _computeBoundingBox() {\n    if (this._vertices === null) {\n      throw new Error('This mesh does not have any vertex.')\n    }\n\n    if (this._worldVerticesNeedUpdate) {\n      this._computeWorldVertices()\n    }\n\n    let minx = +Infinity\n    let miny = +Infinity\n    let minz = +Infinity\n    let maxx = -Infinity\n    let maxy = -Infinity\n    let maxz = -Infinity\n\n    for (let i = 0; i < this._worldVertices.length; i += 3) {\n      minx = Math.min(minx, this._worldVertices[i])\n      miny = Math.min(miny, this._worldVertices[i + 1])\n      minz = Math.min(minz, this._worldVertices[i + 2])\n      maxx = Math.max(maxx, this._worldVertices[i])\n      maxy = Math.max(maxy, this._worldVertices[i + 1])\n      maxz = Math.max(maxz, this._worldVertices[i + 2])\n    }\n\n    this._boundingBox.min[0] = minx\n    this._boundingBox.min[1] = miny\n    this._boundingBox.min[2] = minz\n    this._boundingBox.max[0] = maxx\n    this._boundingBox.max[1] = maxy\n    this._boundingBox.max[2] = maxz\n\n    this._boundingBox.center[0] = (this._boundingBox.min[0] + this._boundingBox.max[0]) / 2\n    this._boundingBox.center[1] = (this._boundingBox.min[1] + this._boundingBox.max[1]) / 2\n    this._boundingBox.center[2] = (this._boundingBox.min[2] + this._boundingBox.max[2]) / 2\n\n    this._boundingBoxNeedsUpdate = false\n  }\n\n\n  get boundingBox() {\n    if (this._boundingBoxNeedsUpdate) {\n      this._computeBoundingBox()\n    }\n    return this._boundingBox\n  }\n\n\n  get modelMatrix() {\n    return this._matrix\n  }\n\n\n  get meshView() {\n    return this._meshView\n  }\n\n\n  set position(p) {\n    this._position[0] = p[0]\n    this._position[1] = p[1]\n    this._position[2] = p[2]\n    this.updateMatrix()\n  }\n\n\n  get position() {\n    return this._position.slice()\n  }\n\n\n  set quaternion(q) {\n    this._quaternion[0] = q[0]\n    this._quaternion[1] = q[1]\n    this._quaternion[2] = q[2]\n    this._quaternion[3] = q[3]\n    this.updateMatrix()\n  }\n\n\n  get quaternion() {\n    return this._quaternion.slice()\n  }\n\n\n  set scale(s) {\n    this._scale[0] = s[0]\n    this._scale[1] = s[1]\n    this._scale[2] = s[2]\n    this.updateMatrix()\n  }\n\n  get scale() {\n    return this._scale.slice()\n  }\n\n  get uniqueEdges() {\n    if (!this._uniqueEdges) {\n      this._computeUniqueEdges()\n    }\n    return this._uniqueEdges\n  }\n\n\n  updateMatrix() {\n    glmatrix.mat4.fromRotationTranslationScale(this._matrix, this._quaternion, this._position, this._scale)\n    this._worldVerticesNeedUpdate = true\n    this._boundingBoxNeedsUpdate = true\n    this._faceNormalsWorldNeedUpdate = true\n    this._faceCentersWorldNeedUpdate = true\n  }\n\n\n  setRotationFromEulerDegree(x, y, z) {\n    glmatrix.quat.fromEuler(this._quaternion, x, y, z)\n    this.updateMatrix()\n  }\n\n\n  _computeUniqueEdges() {\n    if (this._faces === null) {\n      throw new Error('The faces must be set before computing unique edges.')\n    }\n\n    const f = this._faces\n    const vpf = this._verticesPerFace\n\n    const verticePairs = {}\n\n    for (let i = 0; i < f.length; i += vpf) {\n      for (let j = 1; j < vpf; j += 1) {\n        const verticeA = f[i + j - 1]\n        const verticeB = f[i + j]\n        let verticeLowerIndex = null\n        let verticeHigherIndex = null\n\n        if (verticeA < verticeB) {\n          verticeLowerIndex = verticeA\n          verticeHigherIndex = verticeB\n        } else {\n          verticeLowerIndex = verticeB\n          verticeHigherIndex = verticeA\n        }\n\n        if (!(verticeLowerIndex in verticePairs)) {\n          verticePairs[verticeLowerIndex] = new Set()\n        }\n\n        verticePairs[verticeLowerIndex].add(verticeHigherIndex)\n      }\n    }\n\n    const tmp = []\n    const allFirtVertices = Object.keys(verticePairs).map((index) => parseInt(index, 10))\n\n    for (let i = 0; i < allFirtVertices.length; i += 1) {\n      const firstVertex = allFirtVertices[i]\n      const it = verticePairs[firstVertex].entries()\n      // eslint-disable-next-line no-restricted-syntax\n      for (let secondVertex of it) {\n        tmp.push(firstVertex, secondVertex[0])\n      }\n    }\n\n    this._uniqueEdges = new Uint32Array(tmp)\n  }\n\n\n  /**\n   * Create a clone of this mesh with no shared structure. Can downsample the number of vertices\n   * @param {*} nbVertices\n   */\n  clone() {\n    const cpMesh = new Mesh()\n    cpMesh.renderMode = this.renderMode\n    cpMesh.position = this.position\n    cpMesh.quaternion = this.quaternion\n    cpMesh.scale = this.scale\n    cpMesh.verticesPerFace = this.verticesPerFace\n    cpMesh.edgeColor = this.edgeColor\n    cpMesh.faceColor = this.faceColor\n    cpMesh.opacity = this.opacity\n    cpMesh.radius = this.radius\n    cpMesh.lineThickness = this.lineThickness\n\n    cpMesh.vertices = this._vertices ? this._vertices.slice() : null\n    cpMesh.faces = this._faces ? this._faces.slice() : null\n\n    return cpMesh\n  }\n\n\n  _computeFaceCentersWorld() {\n    // just to make sure they are built\n    const wv = this.worldVertices\n\n    const faces = this._faces\n    const vpf = this._verticesPerFace\n    const nbFaces = this._faces.length / this._verticesPerFace\n    const faceCentersWorld = []\n\n    for (let f = 0; f < nbFaces; f += 1) {\n      const v0Index = f * vpf\n      let x = 0\n      let y = 0\n      let z = 0\n\n      for (let v = 0; v < vpf; v += 1) {\n        x += wv[faces[v0Index + v] * 3]\n        y += wv[faces[v0Index + v] * 3 + 1]\n        z += wv[faces[v0Index + v] * 3 + 2]\n      }\n\n      faceCentersWorld.push(\n        x / vpf,\n        y / vpf,\n        z / vpf,\n      )\n    }\n\n    this._faceCentersWorld = new Float32Array(faceCentersWorld)\n    this._faceCentersWorldNeedUpdate = false\n  }\n\n\n  get faceCentersWorld() {\n    if (this._faces === null) {\n      return null\n    }\n\n    if (this._faceCentersWorldNeedUpdate) {\n      this._computeFaceCentersWorld()\n    }\n\n    return this._faceCentersWorld\n  }\n\n\n  _computeFaceNormalWorld() {\n    // just to make sure they are built\n    const wv = this.worldVertices\n\n    const faces = this._faces\n    const vpf = this._verticesPerFace\n    const faceNormalsWorld = []\n\n    const ab = glmatrix.vec3.create()\n    const bc = glmatrix.vec3.create()\n    const n = glmatrix.vec3.create()\n\n    for (let f = 0; f < faces.length; f += vpf) {\n      const indexA = faces[f] * 3\n      const indexB = faces[f + 1] * 3\n      const indexC = faces[f + 2] * 3\n\n      ab[0] = wv[indexB] - wv[indexA]\n      ab[1] = wv[indexB + 1] - wv[indexA + 1]\n      ab[2] = wv[indexB + 2] - wv[indexA + 2]\n      glmatrix.vec3.normalize(ab, ab)\n\n      bc[0] = wv[indexC] - wv[indexB]\n      bc[1] = wv[indexC + 1] - wv[indexB + 1]\n      bc[2] = wv[indexC + 2] - wv[indexB + 2]\n      glmatrix.vec3.normalize(bc, bc)\n\n      glmatrix.vec3.cross(n, ab, bc)\n      glmatrix.vec3.normalize(n, n)\n      faceNormalsWorld.push(n[0], n[1], n[2])\n    }\n\n    this._faceNormalsWorld = new Float32Array(faceNormalsWorld)\n    this._faceNormalsWorldNeedUpdate = false\n  }\n\n\n  get faceNormalsWorld() {\n    if (this._faces === null) {\n      return null\n    }\n\n    if (this._faceNormalsWorldNeedUpdate) {\n      this._computeFaceNormalWorld()\n    }\n    return this._faceNormalsWorld\n  }\n}\n\n\nexport default Mesh\n","import * as glmatrix from 'gl-matrix'\nimport Color from './Color'\nimport Tools from './Tools'\n\n\nclass Light {\n  constructor() {\n    this._id = Tools.uuidv4()\n    this._position = glmatrix.vec3.create()\n    this._color = glmatrix.vec3.fromValues(255, 255, 255)\n    this._type = null\n    this._intensity = 1\n  }\n\n  get id() {\n    return this._id\n  }\n\n\n  set color(c) {\n    this._color = Color.whateverToRgb(c)\n  }\n\n\n  get color() {\n    return this._color\n  }\n\n\n  get type() {\n    return this._type\n  }\n\n\n  set position(p) {\n    this._position = p\n  }\n\n\n  get position() {\n    return this._position\n  }\n\n\n  set intensity(i) {\n    this._intensity = i\n  }\n\n\n  get intensity() {\n    return this._intensity\n  }\n\n\n  // eslint-disable-next-line class-methods-use-this\n  computeLight() {\n    throw new Error('The Light class is only an interface. Use classes that extends it instead.')\n  }\n}\n\nexport default Light\n","import Mesh from './Mesh'\nimport Light from './Light'\n\nclass Scene {\n  constructor() {\n    this._objects = []\n    this._lights = []\n  }\n\n\n  add(mesh) {\n    if (mesh instanceof Mesh) {\n      this._objects.push(mesh)\n    } else {\n      throw new Error('The provided object is not a Mesh.')\n    }\n\n    return this\n  }\n\n\n  remove(meshId) {\n    for (let i = this._objects.length - 1; i >= 0; i -= 1) {\n      if (this._objects[i].id === meshId) {\n        this._objects.splice(i, 1)\n      }\n    }\n    return this\n  }\n\n\n  get(meshId) {\n    return this._objects.filter(m => m.id === meshId)\n  }\n\n\n  getAll() {\n    return this._objects\n  }\n\n\n  \n\n\n\n\n\n\n\n\n\n\n  addLight(light) {\n    if (light instanceof Light) {\n      this._lights.push(light)\n    } else {\n      throw new Error('The provided object is not a Light.')\n    }\n\n    return this\n  }\n\n\n  removeLight(lightId) {\n    for (let i = this._lights.length - 1; i >= 0; i -= 1) {\n      if (this._lights[i].id === lightId) {\n        this._lights.splice(i, 1)\n      }\n    }\n    return this\n  }\n\n\n  getLight(lightId) {\n    return this._lights.filter((l) => l.id === lightId)\n  }\n\n\n  getAllLights() {\n    return this._lights\n  }\n\n\n  getLightsByType(lightType) {\n    return this._lights.filter((l) => l.type === lightType)\n  }\n}\n\nexport default Scene\n","import * as glmatrix from 'gl-matrix'\n\n// inspired by:\n// https://github.com/mikolalysenko/orbit-camera/blob/master/orbit.js\n\nfunction quatFromVec(out, da) {\n  const x = da[0]\n  const y = da[1]\n  const z = da[2]\n  let s = x * x + y * y\n\n  if (s > 1.0) {\n    s = 1.0\n  }\n  out[0] = -da[0]\n  out[1] = da[1]\n  out[2] = da[2] || Math.sqrt(1.0 - s)\n  out[3] = 0.0\n}\n\n\nlet scratch0 = new Float32Array(16)\nlet scratch1 = new Float32Array(16)\n\n\nclass PerspectiveCamera {\n  constructor(options = {}) {\n    this._rotation = glmatrix.quat.create()\n    this._center = glmatrix.vec3.create()\n    this._distance = 10\n\n    // necessary for the projection matrix\n    this._fovy = Math.PI / 4\n    this._aspectRatio = 16 / 9 // typically width / height\n    this._near = 0.01\n    this._far = Infinity\n\n    if ('eye' in options && 'center' in options && 'up' in options) {\n      this.lookAt(options.eye, options.center, options.up)\n    }\n  }\n\n  lookAt(eye, center, up) {\n    glmatrix.mat4.lookAt(scratch0, eye, center, up)\n    glmatrix.mat3.fromMat4(scratch0, scratch0)\n    glmatrix.quat.fromMat3(this._rotation, scratch0)\n    glmatrix.vec3.copy(this._center, center)\n    this._distance = glmatrix.vec3.distance(eye, center)\n  }\n\n  get matrix() {\n    let m = glmatrix.mat4.create()\n    glmatrix.mat4.invert(m, this.viewMatrix)\n    return m\n  }\n\n  get position() {\n    const m = this.matrix\n    return glmatrix.vec3.fromValues(m[12], m[13], m[14])\n  }\n\n  get viewMatrix() {\n    const out = glmatrix.mat4.create()\n    scratch1[0] = 0\n    scratch1[1] = 0\n    scratch1[2] = -this._distance\n    glmatrix.mat4.fromRotationTranslation(\n      out,\n      glmatrix.quat.conjugate(scratch0, this._rotation),\n      scratch1,\n    )\n    glmatrix.mat4.translate(out, out, glmatrix.vec3.negate(scratch0, this._center))\n    return out\n  }\n\n\n  translate(vec) {\n    const d = this._distance\n    scratch0[0] = -d * (vec[0] || 0)\n    scratch0[1] = d * (vec[1] || 0)\n    scratch0[2] = d * (vec[2] || 0)\n    glmatrix.vec3.transformQuat(scratch0, scratch0, this._rotation)\n    glmatrix.vec3.add(this._center, this._center, scratch0)\n  }\n\n\n  dolly(d) {\n    this._distance += d\n    if (this._distance < 0.0) {\n      this._distance = 0.0\n    }\n  }\n\n\n  rotate(db) { // TODO: simplify this\n    quatFromVec(scratch0, [0, 0])\n    quatFromVec(scratch1, db)\n    glmatrix.quat.invert(scratch1, scratch1)\n    glmatrix.quat.multiply(scratch0, scratch0, scratch1)\n    if (glmatrix.quat.length(scratch0) < 1e-6) {\n      return\n    }\n    glmatrix.quat.multiply(this._rotation, this._rotation, scratch0)\n    glmatrix.quat.normalize(this._rotation, this._rotation)\n  }\n\n\n  get projMatrix() {\n    const pm = glmatrix.mat4.create()\n    glmatrix.mat4.perspective(pm, this._fovy, this._aspectRatio, this._near, this._far)\n    return pm\n  }\n\n\n  set aspectRatio(ar) {\n    this._aspectRatio = ar\n  }\n\n\n  get apectRatio() {\n    return this._aspectRatio\n  }\n\n\n  /**\n   * Vertical field of view in radian\n   */\n  set fieldOfView(fov) {\n    this._fovy = fov\n  }\n\n  get fieldOfView() {\n    return this._fovy\n  }\n\n\n  set near(n) {\n    this._near = n\n  }\n\n\n  get near() {\n    return this._near\n  }\n\n\n  set far(f) {\n    this._far = f\n  }\n\n\n  get far() {\n    return this._far\n  }\n\n}\n\nexport default PerspectiveCamera\n","/* eslint-disable no-bitwise */\n/* eslint-disable no-continue */\nimport * as glmatrix from 'gl-matrix'\nimport Scene from './Scene'\nimport PerspectiveCamera from './PerspectiveCamera'\nimport CONSTANTS from './Constants'\nimport RENDER_MODES from './renderModes'\nimport Color from './Color'\n\nclass Renderer {\n  constructor(parentDiv, options) {\n    this._width = 'width' in options ? options.width : window.innerWidth\n    this._height = 'height' in options ? options.height : window.innerHeight\n    this._background = 'background' in options ? options.background : null\n    this._parentDiv = parentDiv\n\n    this._canvas = document.createElementNS(CONSTANTS.SVG_NAMESPACE, 'svg')\n    this._canvas.setAttribute('xmlns', 'http://www.w3.org/2000/svg')\n    this._canvas.setAttribute('xmlns:xlink', 'http://www.w3.org/1999/xlink')\n    this._canvas.setAttribute('height', `${this._height}`)\n    this._canvas.setAttribute('width', `${this._width}`)\n    this._canvas.setAttribute('style', `background-color: ${this._background};`)\n    this._canvas.setAttribute('viewBox', `0 0 ${this._width} ${this._height}`)\n    this._parentDiv.appendChild(this._canvas)\n\n    this._scene = null\n    this._camera = null\n\n    if ('scene' in options) {\n      this.scene = options.scene\n    }\n\n    if ('camera' in options) {\n      this.camera = options.camera\n    }\n\n  }\n\n\n  set scene(s) {\n    if (s instanceof Scene) {\n      this._scene = s\n    } else {\n      throw new Error('Invalid Scene object.')\n    }\n  }\n\n\n  set camera(c) {\n    if (c instanceof PerspectiveCamera) {\n      this._camera = c\n    } else {\n      throw new Error('Invalid Camera Object.')\n    }\n  }\n\n\n  set background(b) {\n    this._background = b\n    this._canvas.setAttribute('style', `background-color: ${this._background};`)\n  }\n\n  get background() {\n    return this._background\n  }\n\n  get svgText() {\n    return this._canvas.outerHTML\n  }\n\n\n  resetCanvas() {\n    this._canvas.innerHTML = ''\n    // while (this._canvas.firstChild) {\n    //   this._canvas.removeChild(this._canvas.firstChild)\n    // }\n  }\n\n\n  render() {\n    if (this._camera === null) {\n      throw new Error('A Camera must be set.')\n    }\n\n    if (this._scene === null) {\n      throw new Error('A Scene must be set.')\n    }\n\n    this.resetCanvas()\n\n    const meshes = this._scene.getAll()\n    const viewMat = this._camera.viewMatrix\n    const projMat = this._camera.projMatrix\n\n    meshes.forEach((mesh) => {\n      if (!mesh.visible) {\n        return\n      }\n\n      // dealing with matrices\n      const modelMat = mesh.modelMatrix\n      const modelViewMat = glmatrix.mat4.create()\n      const modelViewProjMat = glmatrix.mat4.create()\n      // glmatrix.mat4.multiply(modelViewMat, modelMat, viewMat)\n      // glmatrix.mat4.multiply(modelViewProjMat, modelViewMat, projMat)\n\n      glmatrix.mat4.multiply(modelViewMat, viewMat, modelMat)\n      glmatrix.mat4.multiply(modelViewProjMat, projMat, modelViewMat)\n\n      switch (mesh.renderMode) {\n        case RENDER_MODES.POINT_CLOUD:\n          this._renderPointCloud(mesh, modelViewProjMat)\n          break\n\n        case RENDER_MODES.WIREFRAME:\n          this._renderWireframe(mesh, modelViewProjMat)\n          break\n\n        case RENDER_MODES.WIREFRAME_RANDOM_SUB:\n          this._renderWireframeRandomSub(mesh, modelViewProjMat)\n          break\n\n        case RENDER_MODES.FACE_OPAQUE_PLAIN:\n          this._renderFaceOpaquePlain(mesh, modelViewProjMat)\n          break\n\n        case RENDER_MODES.DEBUG_GEOMETRY:\n          this._renderDebug(mesh, modelViewProjMat)\n          break\n\n        case RENDER_MODES.FACE_LIGHT:\n          this._renderFaceLight(mesh, modelViewProjMat)\n          break\n\n        default: throw new Error('Only point cloud rendering is implemented for the moment.')\n      }\n    })\n  }\n\n\n  /**\n   * transform a 2D unit position [-1, 1] into an actual canvas position\n   * that has origin on top left.\n   */\n  _unit2DPositionToCanvasPosition(unitPos) {\n    return [\n      (unitPos[0] * this._width + this._width) * 0.5,\n      this._height - (unitPos[1] * this._height + this._height) * 0.5,\n    ]\n  }\n\n\n  _renderPointCloud(mesh, mvpMat) {\n    const meshView = mesh.meshView\n    const vertices = mesh.worldVertices\n    const camPosition = this._camera.position\n\n    meshView.reset()\n    const tmpVector = glmatrix.vec3.create()\n\n    for (let i = 0; i < vertices.length; i += 3) {\n      // computing the position of the center of the circle to add\n      glmatrix.vec3.transformMat4(tmpVector, [vertices[i], vertices[i + 1], vertices[i + 2]], mvpMat)\n\n      // No rendering if outside of projection  canonical/frustrum box\n      if (tmpVector[0] >= 1\n      || tmpVector[0] <= -1\n      || tmpVector[1] >= 1\n      || tmpVector[1] <= -1\n      || tmpVector[2] >= 1\n      || tmpVector[2] <= -1) {\n        continue\n      }\n\n      const canvasPos = this._unit2DPositionToCanvasPosition(tmpVector)\n\n      // computing the cirlce radius\n      const mesh2camDistance = ((vertices[i] - camPosition[0]) ** 2 + (vertices[i + 1] - camPosition[1]) ** 2 + (vertices[i + 2] - camPosition[2]) ** 2) ** 0.5\n      const radius = (mesh.radius / (Math.tan(this._camera.fieldOfView / 2) * mesh2camDistance)) * (this._height / 2)\n      meshView.addCircle(canvasPos[0], canvasPos[1], radius)\n    }\n\n    if (mesh.showBoundingBox) {\n      this._addBoundingBox(mesh, mvpMat)\n    }\n\n    this._canvas.appendChild(meshView.view)\n  }\n\n  /*\n\n    The BOunding Box\n\n                H +----------+ G (max)\n                / |         /|\n               /  |        / |                     y\n            E +-----------+ F|                     Λ  . z\n              |   |       |  |                     | /\n              | D + - - - | -+ C                   |/\n              |  /        | /                      +-------> x\n              | /         |/\n      (min) A +-----------+ B\n\n  */\n\n  _addBoundingBox(mesh, mvpMat, bbLineThickness = 0.33) {\n    const tmpVector = glmatrix.vec3.create()\n    const meshView = mesh.meshView\n\n    const bb = mesh.boundingBox\n    const a3D = [\n      bb.min[0],\n      bb.min[1],\n      bb.min[2],\n    ]\n    glmatrix.vec3.transformMat4(tmpVector, a3D, mvpMat)\n    const a2D = this._unit2DPositionToCanvasPosition(tmpVector)\n\n    const b3D = [\n      bb.max[0],\n      bb.min[1],\n      bb.min[2],\n    ]\n    glmatrix.vec3.transformMat4(tmpVector, b3D, mvpMat)\n    const b2D = this._unit2DPositionToCanvasPosition(tmpVector)\n\n    const c3D = [\n      bb.max[0],\n      bb.min[1],\n      bb.max[2],\n    ]\n    glmatrix.vec3.transformMat4(tmpVector, c3D, mvpMat)\n    const c2D = this._unit2DPositionToCanvasPosition(tmpVector)\n\n    const d3D = [\n      bb.min[0],\n      bb.min[1],\n      bb.max[2],\n    ]\n    glmatrix.vec3.transformMat4(tmpVector, d3D, mvpMat)\n    const d2D = this._unit2DPositionToCanvasPosition(tmpVector)\n\n    const e3D = [\n      bb.min[0],\n      bb.max[1],\n      bb.min[2],\n    ]\n    glmatrix.vec3.transformMat4(tmpVector, e3D, mvpMat)\n    const e2D = this._unit2DPositionToCanvasPosition(tmpVector)\n\n    const f3D = [\n      bb.max[0],\n      bb.max[1],\n      bb.min[2],\n    ]\n    glmatrix.vec3.transformMat4(tmpVector, f3D, mvpMat)\n    const f2D = this._unit2DPositionToCanvasPosition(tmpVector)\n\n    const g3D = [\n      bb.max[0],\n      bb.max[1],\n      bb.max[2],\n    ]\n    glmatrix.vec3.transformMat4(tmpVector, g3D, mvpMat)\n    const g2D = this._unit2DPositionToCanvasPosition(tmpVector)\n\n    const h3D = [\n      bb.min[0],\n      bb.max[1],\n      bb.max[2],\n    ]\n    glmatrix.vec3.transformMat4(tmpVector, h3D, mvpMat)\n    const h2D = this._unit2DPositionToCanvasPosition(tmpVector)\n\n    // AB line\n    meshView.addLine(a2D[0], a2D[1], b2D[0], b2D[1], bbLineThickness)\n\n    // BC line\n    meshView.addLine(b2D[0], b2D[1], c2D[0], c2D[1], bbLineThickness)\n\n    // CD line\n    meshView.addLine(c2D[0], c2D[1], d2D[0], d2D[1], bbLineThickness)\n\n    // DA line\n    meshView.addLine(d2D[0], d2D[1], a2D[0], a2D[1], bbLineThickness)\n\n    // AE line\n    meshView.addLine(a2D[0], a2D[1], e2D[0], e2D[1], bbLineThickness)\n\n    // BF line\n    meshView.addLine(b2D[0], b2D[1], f2D[0], f2D[1], bbLineThickness)\n\n    // CG line\n    meshView.addLine(c2D[0], c2D[1], g2D[0], g2D[1], bbLineThickness)\n\n    // DH line\n    meshView.addLine(d2D[0], d2D[1], h2D[0], h2D[1], bbLineThickness)\n\n    // EF line\n    meshView.addLine(e2D[0], e2D[1], f2D[0], f2D[1], bbLineThickness)\n\n    // FG line\n    meshView.addLine(f2D[0], f2D[1], g2D[0], g2D[1], bbLineThickness)\n\n    // GH line\n    meshView.addLine(g2D[0], g2D[1], h2D[0], h2D[1], bbLineThickness)\n\n    // HE line\n    meshView.addLine(h2D[0], h2D[1], e2D[0], e2D[1], bbLineThickness)\n  }\n\n\n  _renderWireframe(mesh, mvpMat) {\n    const meshView = mesh.meshView\n    const vertices = mesh.worldVertices\n    const uniqueEdges = mesh.uniqueEdges\n    const camPosition = this._camera.position\n\n    meshView.reset()\n    const tmpVectorA = glmatrix.vec3.create()\n    const tmpVectorB = glmatrix.vec3.create()\n\n    for (let i = 0; i < uniqueEdges.length; i += 2) {\n      const vertIndexA = uniqueEdges[i]\n      const vertIndexB = uniqueEdges[i + 1]\n\n      glmatrix.vec3.transformMat4(tmpVectorA, [vertices[3 * vertIndexA], vertices[3 * vertIndexA + 1], vertices[3 * vertIndexA + 2]], mvpMat)\n      glmatrix.vec3.transformMat4(tmpVectorB, [vertices[3 * vertIndexB], vertices[3 * vertIndexB + 1], vertices[3 * vertIndexB + 2]], mvpMat)\n\n      // No rendering if the two points are outside of projection  canonical/frustrum box\n      if ((tmpVectorA[0] >= 1\n      || tmpVectorA[0] <= -1\n      || tmpVectorA[1] >= 1\n      || tmpVectorA[1] <= -1\n      || tmpVectorA[2] >= 1\n      || tmpVectorA[2] <= -1)\n      && (tmpVectorB[0] >= 1\n      || tmpVectorB[0] <= -1\n      || tmpVectorB[1] >= 1\n      || tmpVectorB[1] <= -1\n      || tmpVectorB[2] >= 1\n      || tmpVectorB[2] <= -1)) {\n        continue\n      }\n\n      const middlePoint = [\n        (tmpVectorA[0] + tmpVectorB[0]) / 2,\n        (tmpVectorA[1] + tmpVectorB[1]) / 2,\n        (tmpVectorA[2] + tmpVectorB[2]) / 2,\n      ]\n\n      const mesh2camDistance = ((middlePoint[0] - camPosition[0]) ** 2 + (middlePoint[1] - camPosition[1]) ** 2 + (middlePoint[2] - camPosition[2]) ** 2) ** 0.5\n      const thickness = (mesh.lineThickness / (Math.tan(this._camera.fieldOfView / 2) * mesh2camDistance)) * (this._height / 2)\n      const canvasPosA = this._unit2DPositionToCanvasPosition(tmpVectorA)\n      const canvasPosB = this._unit2DPositionToCanvasPosition(tmpVectorB)\n\n      meshView.addLine(canvasPosA[0], canvasPosA[1], canvasPosB[0], canvasPosB[1], thickness)\n    }\n\n    if (mesh.showBoundingBox) {\n      this._addBoundingBox(mesh, mvpMat)\n    }\n\n    this._canvas.appendChild(meshView.view)\n  }\n\n\n\n  _renderWireframeRandomSub(mesh, mvpMat) {\n    const meshView = mesh.meshView\n    const vertices = mesh.worldVertices\n    const uniqueEdges = mesh.uniqueEdges\n    const camPosition = this._camera.position\n\n    // Displaying at most 750 edges, but most likely 20% of the edges\n    const edgesToRender = Math.min(750, mesh.uniqueEdges.length * 0.1)\n\n    meshView.reset()\n    const tmpVectorA = glmatrix.vec3.create()\n    const tmpVectorB = glmatrix.vec3.create()\n\n    const alreadyRenderedEdgeIndex = {}\n    let i = 0\n\n    while (i < edgesToRender) {\n      const edgeIndex = ~~(Math.random() * ((mesh.uniqueEdges.length - 1) * 0.5))\n\n      if (edgeIndex in alreadyRenderedEdgeIndex) {\n        continue\n      } else {\n        alreadyRenderedEdgeIndex[edgeIndex] = true\n        i += 1\n      }\n\n      const vertIndexA = uniqueEdges[edgeIndex * 2]\n      const vertIndexB = uniqueEdges[edgeIndex * 2 + 1]\n\n      glmatrix.vec3.transformMat4(tmpVectorA, [vertices[3 * vertIndexA], vertices[3 * vertIndexA + 1], vertices[3 * vertIndexA + 2]], mvpMat)\n      glmatrix.vec3.transformMat4(tmpVectorB, [vertices[3 * vertIndexB], vertices[3 * vertIndexB + 1], vertices[3 * vertIndexB + 2]], mvpMat)\n\n      // No rendering if the two points are outside of projection  canonical/frustrum box\n      if ((tmpVectorA[0] >= 1\n      || tmpVectorA[0] <= -1\n      || tmpVectorA[1] >= 1\n      || tmpVectorA[1] <= -1\n      || tmpVectorA[2] >= 1\n      || tmpVectorA[2] <= -1)\n      && (tmpVectorB[0] >= 1\n      || tmpVectorB[0] <= -1\n      || tmpVectorB[1] >= 1\n      || tmpVectorB[1] <= -1\n      || tmpVectorB[2] >= 1\n      || tmpVectorB[2] <= -1)) {\n        continue\n      }\n\n      const middlePoint = [\n        (tmpVectorA[0] + tmpVectorB[0]) / 2,\n        (tmpVectorA[1] + tmpVectorB[1]) / 2,\n        (tmpVectorA[2] + tmpVectorB[2]) / 2,\n      ]\n\n      const mesh2camDistance = ((middlePoint[0] - camPosition[0]) ** 2 + (middlePoint[1] - camPosition[1]) ** 2 + (middlePoint[2] - camPosition[2]) ** 2) ** 0.5\n      const thickness = (mesh.lineThickness / (Math.tan(this._camera.fieldOfView / 2) * mesh2camDistance)) * (this._height / 2)\n      const canvasPosA = this._unit2DPositionToCanvasPosition(tmpVectorA)\n      const canvasPosB = this._unit2DPositionToCanvasPosition(tmpVectorB)\n\n      meshView.addLine(canvasPosA[0], canvasPosA[1], canvasPosB[0], canvasPosB[1], thickness)\n    }\n\n    if (mesh.showBoundingBox) {\n      this._addBoundingBox(mesh, mvpMat)\n    }\n\n    this._canvas.appendChild(meshView.view)\n  }\n\n\n  _renderFaceOpaquePlain(mesh, mvpMat) {\n    const meshView = mesh.meshView\n    meshView.reset()\n    const vertices = mesh.worldVertices\n    const faces = mesh.faces\n    const faceNormals = mesh.faceNormalsWorld\n    const faceCenters = mesh.faceCentersWorld\n    const camPosition = this._camera.position\n    const vpf = mesh.verticesPerFace\n    const nbFaces = faces.length / vpf\n\n    const faceNormal = glmatrix.vec3.create()\n    const faceCenter = glmatrix.vec3.create()\n    const camToCenter = glmatrix.vec3.create()\n    const normalTip = glmatrix.vec3.create()\n    const tmp = glmatrix.vec3.create()\n\n    // will be filled with\n    const polygonsToRender = []\n    const tmpCoord = glmatrix.vec3.create()\n\n    for (let f = 0; f < nbFaces; f += 1) {\n      const v0Index = f * vpf\n\n      // discard a face if its normal goes more or less the same direction as the vector camera-to-faceCenter.\n      // IOW, if dot product >= 1\n      faceNormal[0] = faceNormals[f * 3]\n      faceNormal[1] = faceNormals[f * 3 + 1]\n      faceNormal[2] = faceNormals[f * 3 + 2]\n\n      faceCenter[0] = faceCenters[f * 3]\n      faceCenter[1] = faceCenters[f * 3 + 1]\n      faceCenter[2] = faceCenters[f * 3 + 2]\n\n      camToCenter[0] = faceCenter[0] - camPosition[0]\n      camToCenter[1] = faceCenter[1] - camPosition[1]\n      camToCenter[2] = faceCenter[2] - camPosition[2]\n      const camToCenterDist = glmatrix.vec3.length(camToCenter)\n      glmatrix.vec3.normalize(camToCenter, camToCenter)\n\n      // compute face center in 2D\n      glmatrix.vec3.transformMat4(tmp, faceCenter, mvpMat)\n      const faceCenter2D = this._unit2DPositionToCanvasPosition(tmp)\n\n      // compute the normal vector in 2D\n      normalTip[0] = faceCenter[0] + faceNormal[0] * 0.2\n      normalTip[1] = faceCenter[1] + faceNormal[1] * 0.2\n      normalTip[2] = faceCenter[2] + faceNormal[2] * 0.2\n      glmatrix.vec3.transformMat4(tmp, normalTip, mvpMat)\n      const normalTip2D = this._unit2DPositionToCanvasPosition(tmp)\n\n      const dotProd = glmatrix.vec3.dot(faceNormal, camToCenter)\n\n      if (dotProd >= 0) {\n        continue\n      }\n\n      // const allVerticesOfFace3D = [] // in the form [x, y, z, x, y, z, ...]\n      const allVerticesOfFace2D = [] // in the form [x, y, x, y, ...]\n      let allProjectionsAreOutsideFrustrum = true\n      for (let v = 0; v < vpf; v += 1) {\n        const offset = faces[v0Index + v] * 3\n        tmpCoord[0] = vertices[offset]\n        tmpCoord[1] = vertices[offset + 1]\n        tmpCoord[2] = vertices[offset + 2]\n        // allVerticesOfFace3D.push(tmpCoord[0], tmpCoord[1], tmpCoord[2])\n\n        glmatrix.vec3.transformMat4(tmpCoord, tmpCoord, mvpMat)\n\n        const isOutsideFrustrum = (tmpCoord[0] >= 1\n                                || tmpCoord[0] <= -1\n                                || tmpCoord[1] >= 1\n                                || tmpCoord[1] <= -1\n                                || tmpCoord[2] >= 1\n                                || tmpCoord[2] <= -1)\n        allProjectionsAreOutsideFrustrum = allProjectionsAreOutsideFrustrum && isOutsideFrustrum\n        const canvasPos = this._unit2DPositionToCanvasPosition(tmpCoord)\n        allVerticesOfFace2D.push(canvasPos[0], canvasPos[1])\n      }\n\n      // all the vertices must be oustise to not render\n      if (allProjectionsAreOutsideFrustrum) {\n        continue\n      }\n\n      polygonsToRender.push({\n        points2D: allVerticesOfFace2D,\n        faceCenter2D,\n        normalTip2D,\n        thickness: (mesh.lineThickness / (Math.tan(this._camera.fieldOfView / 2) * camToCenterDist)) * (this._height / 2),\n        distanceToCam: camToCenterDist,\n      })\n    }\n\n    polygonsToRender.sort((a, b) => (a.distanceToCam > b.distanceToCam ? -1 : 1)).forEach((polygon) => {\n      // adding the face\n      meshView.addFaceOpaquePlain(polygon.points2D, polygon.thickness)\n    })\n\n    this._canvas.appendChild(meshView.view)\n  }\n\n\n\n\n\n\n\n\n\n\n\n  _renderDebug(mesh, mvpMat) {\n    const meshView = mesh.meshView\n    meshView.reset()\n    const vertices = mesh.worldVertices\n    const faces = mesh.faces\n    const faceNormals = mesh.faceNormalsWorld\n    const faceCenters = mesh.faceCentersWorld\n    const camPosition = this._camera.position\n    const vpf = mesh.verticesPerFace\n    const nbFaces = faces.length / vpf\n\n    const faceNormal = glmatrix.vec3.create()\n    const faceCenter = glmatrix.vec3.create()\n    const camToCenter = glmatrix.vec3.create()\n    const normalTip = glmatrix.vec3.create()\n    const tmp = glmatrix.vec3.create()\n\n    // will be filled with\n    const polygonsToRender = []\n    const tmpCoord = glmatrix.vec3.create()\n\n    for (let f = 0; f < nbFaces; f += 1) {\n      const v0Index = f * vpf\n\n      // discard a face if its normal goes more or less the same direction as the vector camera-to-faceCenter.\n      // IOW, if dot product >= 1\n      faceNormal[0] = faceNormals[f * 3]\n      faceNormal[1] = faceNormals[f * 3 + 1]\n      faceNormal[2] = faceNormals[f * 3 + 2]\n\n      faceCenter[0] = faceCenters[f * 3]\n      faceCenter[1] = faceCenters[f * 3 + 1]\n      faceCenter[2] = faceCenters[f * 3 + 2]\n\n      camToCenter[0] = faceCenter[0] - camPosition[0]\n      camToCenter[1] = faceCenter[1] - camPosition[1]\n      camToCenter[2] = faceCenter[2] - camPosition[2]\n      const camToCenterDist = glmatrix.vec3.length(camToCenter)\n      glmatrix.vec3.normalize(camToCenter, camToCenter)\n\n      // compute face center in 2D\n      glmatrix.vec3.transformMat4(tmp, faceCenter, mvpMat)\n      const faceCenter2D = this._unit2DPositionToCanvasPosition(tmp)\n\n      // compute the normal vector in 2D\n      normalTip[0] = faceCenter[0] + faceNormal[0] * 0.2\n      normalTip[1] = faceCenter[1] + faceNormal[1] * 0.2\n      normalTip[2] = faceCenter[2] + faceNormal[2] * 0.2\n      glmatrix.vec3.transformMat4(tmp, normalTip, mvpMat)\n      const normalTip2D = this._unit2DPositionToCanvasPosition(tmp)\n\n      // const dotProd = glmatrix.vec3.dot(faceNormal, camToCenter)\n\n      // if (dotProd >= 0) {\n      //   continue\n      // }\n\n      // const allVerticesOfFace3D = [] // in the form [x, y, z, x, y, z, ...]\n      const allVerticesOfFace2D = [] // in the form [x, y, x, y, ...]\n      let allProjectionsAreOutsideFrustrum = true\n      for (let v = 0; v < vpf; v += 1) {\n        const offset = faces[v0Index + v] * 3\n        tmpCoord[0] = vertices[offset]\n        tmpCoord[1] = vertices[offset + 1]\n        tmpCoord[2] = vertices[offset + 2]\n        // allVerticesOfFace3D.push(tmpCoord[0], tmpCoord[1], tmpCoord[2])\n\n        glmatrix.vec3.transformMat4(tmpCoord, tmpCoord, mvpMat)\n\n        const isOutsideFrustrum = (tmpCoord[0] >= 1\n                                || tmpCoord[0] <= -1\n                                || tmpCoord[1] >= 1\n                                || tmpCoord[1] <= -1\n                                || tmpCoord[2] >= 1\n                                || tmpCoord[2] <= -1)\n        allProjectionsAreOutsideFrustrum = allProjectionsAreOutsideFrustrum && isOutsideFrustrum\n\n        const canvasPos = this._unit2DPositionToCanvasPosition(tmpCoord)\n        allVerticesOfFace2D.push(canvasPos[0], canvasPos[1])\n      }\n\n      // all the vertices must be oustise to not render\n      if (allProjectionsAreOutsideFrustrum) {\n        continue\n      }\n\n      polygonsToRender.push({\n        points2D: allVerticesOfFace2D,\n        faceCenter2D,\n        normalTip2D,\n        distanceToCam: camToCenterDist,\n      })\n    }\n\n    polygonsToRender.sort((a, b) => (a.distanceToCam > b.distanceToCam ? -1 : 1)).forEach((polygon) => {\n      // adding the face\n      meshView.addFaceOpaquePlain(polygon.points2D, 0.3)\n\n      // adding the polygon center circle\n      meshView.addCircle(polygon.faceCenter2D[0], polygon.faceCenter2D[1], 1)\n\n      // adding the normal line\n      meshView.addLine(polygon.faceCenter2D[0], polygon.faceCenter2D[1], polygon.normalTip2D[0], polygon.normalTip2D[1], 0.3)\n    })\n\n    this._canvas.appendChild(meshView.view)\n  }\n\n\n\n\n\n\n\n\n\n\n  _renderFaceLight(mesh, mvpMat) {\n    const meshView = mesh.meshView\n    meshView.reset()\n    const vertices = mesh.worldVertices\n    const faces = mesh.faces\n    const faceNormals = mesh.faceNormalsWorld\n    const faceCenters = mesh.faceCentersWorld\n    const camPosition = this._camera.position\n    const vpf = mesh.verticesPerFace\n    const nbFaces = faces.length / vpf\n    const meshColor = mesh.faceColor\n    const meshSpecularity = mesh.specularity\n\n    const A_SMALL_BIT = 0.25\n\n    const faceNormal = glmatrix.vec3.create()\n    const faceCenter = glmatrix.vec3.create()\n    const camToCenter = glmatrix.vec3.create()\n    const tmp = glmatrix.vec3.create()\n\n    // const ambientLights = this._scene.getLightsByType(Light.TYPES.AMBIANT)\n    // const pointLights = this._scene.getLightsByType(Light.TYPES.POINT)\n    const allLights = this._scene.getAllLights()\n\n    // will be filled with\n    const polygonsToRender = []\n    const tmpCoord = glmatrix.vec3.create()\n\n    for (let f = 0; f < nbFaces; f += 1) {\n      const v0Index = f * vpf\n\n      // discard a face if its normal goes more or less the same direction as the vector camera-to-faceCenter.\n      // IOW, if dot product >= 1\n      faceNormal[0] = faceNormals[f * 3]\n      faceNormal[1] = faceNormals[f * 3 + 1]\n      faceNormal[2] = faceNormals[f * 3 + 2]\n\n      faceCenter[0] = faceCenters[f * 3]\n      faceCenter[1] = faceCenters[f * 3 + 1]\n      faceCenter[2] = faceCenters[f * 3 + 2]\n\n      camToCenter[0] = faceCenter[0] - camPosition[0]\n      camToCenter[1] = faceCenter[1] - camPosition[1]\n      camToCenter[2] = faceCenter[2] - camPosition[2]\n      const camToCenterDist = glmatrix.vec3.length(camToCenter)\n      glmatrix.vec3.normalize(camToCenter, camToCenter)\n\n      // discard faces with normal on the wrong direction\n      const dotProd = glmatrix.vec3.dot(faceNormal, camToCenter)\n      if (dotProd >= 0) {\n        continue\n      }\n\n      glmatrix.vec3.transformMat4(tmp, faceCenter, mvpMat)\n      const faceCenter2D = this._unit2DPositionToCanvasPosition(tmp)\n\n      // const allVerticesOfFace3D = [] // in the form [x, y, z, x, y, z, ...]\n      const allVerticesOfFace2D = [] // in the form [x, y, x, y, ...]\n      let allProjectionsAreOutsideFrustrum = true\n      for (let v = 0; v < vpf; v += 1) {\n        const offset = faces[v0Index + v] * 3\n        tmpCoord[0] = vertices[offset]\n        tmpCoord[1] = vertices[offset + 1]\n        tmpCoord[2] = vertices[offset + 2]\n        // allVerticesOfFace3D.push(tmpCoord[0], tmpCoord[1], tmpCoord[2])\n\n        glmatrix.vec3.transformMat4(tmpCoord, tmpCoord, mvpMat)\n\n        const isOutsideFrustrum = (tmpCoord[0] >= 1\n                                || tmpCoord[0] <= -1\n                                || tmpCoord[1] >= 1\n                                || tmpCoord[1] <= -1\n                                || tmpCoord[2] >= 1\n                                || tmpCoord[2] <= -1)\n        allProjectionsAreOutsideFrustrum = allProjectionsAreOutsideFrustrum && isOutsideFrustrum\n        const canvasPos = this._unit2DPositionToCanvasPosition(tmpCoord)\n\n        // we extend the face polygon just a tiny bit so that the stitches between two faces does not show\n        tmp[0] = canvasPos[0] - faceCenter2D[0]\n        tmp[1] = canvasPos[1] - faceCenter2D[1]\n        glmatrix.vec3.normalize(tmp, tmp)\n\n        allVerticesOfFace2D.push(canvasPos[0] + tmp[0] * A_SMALL_BIT, canvasPos[1] + tmp[1] * A_SMALL_BIT)\n        // allVerticesOfFace2D.push(canvasPos[0], canvasPos[1])\n      }\n\n      // all the vertices must be oustise to not render\n      if (allProjectionsAreOutsideFrustrum) {\n        continue\n      }\n\n      // compute light.\n      // 1. start from black color\n      const faceColor = [0, 0, 0]\n\n      // 2. Add contributions from each lights\n      allLights.forEach((l) => {\n        const colorToAdd = l.computeLight({\n          surfaceColor: meshColor,\n          illuminatedPosition: faceCenter,\n          illuminatedNormal: faceNormal,\n          specularity: meshSpecularity,\n          cameraPosition: camPosition,\n        })\n\n        faceColor[0] += colorToAdd[0]\n        faceColor[1] += colorToAdd[1]\n        faceColor[2] += colorToAdd[2]\n      })\n\n      polygonsToRender.push({\n        points2D: allVerticesOfFace2D,\n        faceColor,\n        distanceToCam: camToCenterDist,\n      })\n    }\n\n    polygonsToRender.sort((a, b) => (a.distanceToCam > b.distanceToCam ? -1 : 1)).forEach((polygon) => {\n      // adding the face\n      meshView.addFaceColorNoStroke(polygon.points2D, Color.rgbToCssRgb(polygon.faceColor))\n    })\n\n    this._canvas.appendChild(meshView.view)\n  }\n\n\n}\n\nexport default Renderer\n","import parseWFObj from 'wavefront-obj-parser'\n\n\nclass ObjParser {\n  static parse(objStr) {\n    const meshData = parseWFObj(objStr)\n    const faces = new Uint32Array(meshData.vertexPositionIndices.filter((v) => v >= 0)) // the lib leaves room for 4-vertices faces by adding -1\n    const vertices = new Float32Array(meshData.vertexPositions)\n    const normals = new Float32Array(meshData.vertexNormals)\n\n    return {\n      vertices,\n      faces,\n      normals,\n    }\n  }\n}\n\nexport default ObjParser\n","export default {\n  AMBIANT: 1,\n  POINT: 2,\n}\n","import * as glmatrix from 'gl-matrix'\nimport Light from './Light'\nimport LIGHT_TYPES from './LightTypes'\n\nconst tmpMat4 = glmatrix.mat4.create()\nconst tmpVec3 = glmatrix.vec3.create()\nconst tmpVec3_2 = glmatrix.vec3.create()\n\nclass PointLight extends Light {\n  constructor() {\n    super()\n    this._type = LIGHT_TYPES.POINT\n    this._decayEnabled = false\n    this._radius = 1\n  }\n\n  get radius() {\n    return this._radius\n  }\n\n\n  set radius(r) {\n    this._radius = r\n  }\n\n  enableDecay() {\n    this._decayEnabled = true\n  }\n\n\n  disableDecay() {\n    this._decayEnabled = false\n  }\n\n\n  isDecaysEnabled() {\n    return this._decayEnabled\n  }\n\n\n  computeLight(options = {}) {\n    // the word 'surface' is chosen rather than 'mesh' because it's more generic\n    let surfaceColor = null\n    if ('surfaceColor' in options) {\n      surfaceColor = options.surfaceColor\n    } else {\n      throw new Error('The mesh color is mandatory to compute the light with PointLight.')\n    }\n\n    let illuminatedPosition = null\n    if ('illuminatedPosition' in options) {\n      illuminatedPosition = options.illuminatedPosition\n    } else {\n      throw new Error('The illuminated position is mandatory to compute the light with PointLight.')\n    }\n\n    let illuminatedNormal = null\n    if ('illuminatedNormal' in options) {\n      illuminatedNormal = options.illuminatedNormal\n    } else {\n      throw new Error('The illuminated normal is mandatory to compute the light with PointLight.')\n    }\n\n    const specularity = 'specularity' in options ? options.specularity : 0\n    const cameraPosition = 'cameraPosition' in options ? options.cameraPosition : null\n\n    if (specularity && !cameraPosition) {\n      throw new Error('The camera position is required to compute the specularity')\n    }\n\n    // Step 1: compute diffuse light. This is not related to camera position, light with emit\n    // on half space following a Lambertian law. The resulting color is a blend of the surface/mesh color.\n    // If decay is enabled, the light decay follow an inverse square law (http://hyperphysics.phy-astr.gsu.edu/hbase/vision/isql.html)\n    // where the intensity 'this._intensity' is effective only at the distance 'this._radius' and\n    // the intensity at another distance d is:\n    //        i = this._intensity  /  (d / this._radius)^2\n\n    // newIntensity is just like this._intensity excepts it decays if the the decay options is enabled\n    let newIntensity = this._intensity\n\n    if (this._decayEnabled) {\n      const lightToSurfaceDistance = (\n        (this._position[0] - illuminatedPosition[0]) ** 2 +\n        (this._position[1] - illuminatedPosition[1]) ** 2 +\n        (this._position[2] - illuminatedPosition[2]) ** 2\n      ) ** 0.5\n      newIntensity = this._intensity / ((lightToSurfaceDistance / this._radius) ** 2)\n      // newIntensity = Math.min(this._intensity, this._intensity / ((lightToSurfaceDistance / this._radius) ** 2))\n    }\n\n    // vector from this light source to the surface center\n    const surfaceToLight = glmatrix.vec3.fromValues(\n      this._position[0] - illuminatedPosition[0],\n      this._position[1] - illuminatedPosition[1],\n      this._position[2] - illuminatedPosition[2],\n    )\n    glmatrix.vec3.normalize(surfaceToLight, surfaceToLight)\n\n    // dot product between the surface normal vector and the \n    let dotProd = glmatrix.vec3.dot(surfaceToLight, illuminatedNormal)\n    dotProd = dotProd > 0 ? dotProd : 0 // onsly considering half space\n\n    let addedColor = [\n      255 * (surfaceColor[0] / 255) * (this._color[0] / 255) * dotProd * newIntensity,\n      255 * (surfaceColor[1] / 255) * (this._color[1] / 255) * dotProd * newIntensity,\n      255 * (surfaceColor[2] / 255) * (this._color[2] / 255) * dotProd * newIntensity,\n    ]\n\n    if (specularity > 0) {\n      // Step 2: compute specularity. Only if 'specularity' is greater than 0. This is done with a Phong formula\n      // that depends on the camera position and the resulting color is mostly the light source color\n      // (and not a blend with the surface/mesh color)\n\n      // A ray comes from the light source to the center of the surface with a given angle from the surface normal,\n      // then bounces with an equal angle.\n      // Compute this light bounce vector:\n      // 1. compute the vector from light to surface center\n      tmpVec3[0] = illuminatedPosition[0] - this._position[0]\n      tmpVec3[1] = illuminatedPosition[1] - this._position[1]\n      tmpVec3[2] = illuminatedPosition[2] - this._position[2]\n      // 2. normalize it\n      glmatrix.vec3.normalize(tmpVec3, tmpVec3)\n      // 3. comput dot product\n      const dotLightToNormal = glmatrix.vec3.dot(illuminatedNormal, tmpVec3)\n\n      if (dotLightToNormal < 0) {\n        // 4. compute reflection\n        tmpVec3[0] = tmpVec3[0] - 2 * dotLightToNormal * illuminatedNormal[0]\n        tmpVec3[1] = tmpVec3[1] - 2 * dotLightToNormal * illuminatedNormal[1]\n        tmpVec3[2] = tmpVec3[2] - 2 * dotLightToNormal * illuminatedNormal[2]\n        glmatrix.vec3.normalize(tmpVec3, tmpVec3)\n\n        // 5. compute the vector surfaceCenter-to-camera\n        tmpVec3_2[0] = cameraPosition[0] - illuminatedPosition[0]\n        tmpVec3_2[1] = cameraPosition[1] - illuminatedPosition[1]\n        tmpVec3_2[2] = cameraPosition[2] - illuminatedPosition[2]\n        // 6. normalize this\n        glmatrix.vec3.normalize(tmpVec3_2, tmpVec3_2)\n        // 7. compute the dot product to have the specularity component\n        const dotProd2 = glmatrix.vec3.dot(tmpVec3, tmpVec3_2) ** (30 / specularity) // the 2 is just to make the light smaller and more intense\n\n        // 8. adding specularity to the diffuse light\n        addedColor[0] += this._color[0] * dotProd2 * specularity * ((newIntensity + this._intensity) / 2)\n        addedColor[1] += this._color[1] * dotProd2 * specularity * ((newIntensity + this._intensity) / 2)\n        addedColor[2] += this._color[2] * dotProd2 * specularity * ((newIntensity + this._intensity) / 2)\n      }\n    }\n\n    addedColor[0] = Math.min(255, addedColor[0])\n    addedColor[1] = Math.min(255, addedColor[1])\n    addedColor[2] = Math.min(255, addedColor[2])\n\n    return addedColor\n  }\n\n\n}\n\nexport default PointLight\n","import Light from './Light'\nimport LIGHT_TYPES from './LightTypes'\n\nclass AmbiantLight extends Light {\n  constructor() {\n    super()\n    this._type = LIGHT_TYPES.AMBIANT\n  }\n\n\n  computeLight(options = {}) {\n    let surfaceColor = null\n\n    if ('surfaceColor' in options) {\n      surfaceColor = options.surfaceColor\n    } else {\n      throw new Error('The surface color is mandatory to compute the light with AmbiantLight.')\n    }\n\n    return [\n      ((this._color[0] / 255) * (surfaceColor[0] / 255)) * 255 * this._intensity,\n      ((this._color[1] / 255) * (surfaceColor[1] / 255)) * 255 * this._intensity,\n      ((this._color[2] / 255) * (surfaceColor[2] / 255)) * 255 * this._intensity,\n    ]\n  }\n}\n\nexport default AmbiantLight\n","import Scene from './Scene'\nimport PerspectiveCamera from './PerspectiveCamera'\nimport Mesh from './Mesh'\nimport RENDER_MODES from './renderModes'\nimport Renderer from './Renderer'\nimport ObjParser from './ObjParser'\nimport Light from './Light'\nimport PointLight from './PointLight'\nimport AmbiantLight from './AmbiantLight'\nimport LIGHT_TYPES from './LightTypes'\n\nexport default ({\n  Scene,\n  PerspectiveCamera,\n  Mesh,\n  Renderer,\n  ObjParser,\n  Light,\n  PointLight,\n  AmbiantLight,\n  RENDER_MODES,\n  LIGHT_TYPES,\n})\n"],"names":["glmatrix.vec3","glmatrix.quat","glmatrix.mat4","glmatrix.mat3"],"mappings":"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"}